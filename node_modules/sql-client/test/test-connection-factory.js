// Generated by CoffeeScript 1.8.0
(function() {
  var ConnectionFactory, HOMEDIR, LIB_COV, LIB_DIR, fs, path, should;

  fs = require('fs');

  path = require('path');

  HOMEDIR = path.join(__dirname, '..');

  LIB_COV = path.join(HOMEDIR, 'lib-cov');

  LIB_DIR = fs.existsSync(LIB_COV) ? LIB_COV : path.join(HOMEDIR, 'lib');

  ConnectionFactory = require(path.join(LIB_DIR, 'connection-factory')).ConnectionFactory;

  should = require('should');

  describe('ConnectionFactory', function() {
    it('demands that open_connect be overridden', function(done) {
      var factory;
      factory = new ConnectionFactory();
      return factory.open_connection({}, function(err, connection) {
        should.exist(err);
        should.not.exist(connection);
        return done();
      });
    });
    it('demands that close_connection be overridden if connection.end and connection.close don\'t exist', function(done) {
      var factory;
      factory = new ConnectionFactory();
      return factory.close_connection({}, function(err) {
        should.exist(err);
        return done();
      });
    });
    it('demands that execute be overridden if connection.query doesn\'t exist', function(done) {
      var factory;
      factory = new ConnectionFactory();
      return factory.execute({}, "sql", ["bindvars"], function(err, result) {
        should.exist(err);
        should.not.exist(result);
        return done();
      });
    });
    it('uses connection.end or connection.close when available', function(done) {
      var conn, end_called, factory;
      factory = new ConnectionFactory();
      end_called = false;
      conn = {
        end: function() {
          return end_called = true;
        }
      };
      return factory.close_connection(conn, function(err) {
        var close_called;
        should.not.exist(err);
        end_called.should.be.ok;
        close_called = false;
        conn = {
          close: function() {
            return close_called = true;
          }
        };
        return factory.close_connection(conn, function(err) {
          should.not.exist(err);
          close_called.should.be.ok;
          return done();
        });
      });
    });
    it('uses connection.query when available', function(done) {
      var conn, factory, query_called;
      factory = new ConnectionFactory();
      query_called = false;
      conn = {
        query: function(s, b, c) {
          query_called = true;
          return c();
        }
      };
      return factory.execute(conn, "s", ["b"], function(err, result) {
        should.not.exist(err);
        query_called.should.be.ok;
        return done();
      });
    });
    return it('pre_process_sql is a no-op by default', function(done) {
      var factory;
      factory = new ConnectionFactory();
      return factory.pre_process_sql("s", "b", function(err, s, b) {
        should.not.exist(err);
        s.should.equal("s");
        b.should.equal("b");
        return done();
      });
    });
  });

}).call(this);
