// Generated by CoffeeScript 1.8.0
(function() {
  var HOMEDIR, LIB_COV, LIB_DIR, TEST_DIR, fs, path, should;

  should = require('should');

  fs = require('fs');

  path = require('path');

  HOMEDIR = path.join(__dirname, '..');

  LIB_COV = path.join(HOMEDIR, 'lib-cov');

  LIB_DIR = fs.existsSync(LIB_COV) ? LIB_COV : path.join(HOMEDIR, 'lib');

  TEST_DIR = path.join(HOMEDIR, 'test');

  describe('Config', (function(_this) {
    return function() {
      beforeEach(function(done) {
        _this.original_node_env = process.env.NODE_ENV;
        _this.original_config_file = process.env.config_file;
        _this.original_config_dir = process.env.config_dir;
        return done();
      });
      afterEach(function(done) {
        var key, value, _ref;
        if (_this.original_node_env) {
          process.env.NODE_ENV = _this.original_node_env;
        } else {
          delete process.env.NODE_ENV;
        }
        if (_this.original_config_file != null) {
          process.env.config_file = _this.original_config_file;
        } else {
          delete process.env.config_file;
        }
        if (_this.original_config_dir != null) {
          process.env.config_dir = _this.original_config_dir;
        } else {
          delete process.env.config_dir;
        }
        delete require.cache[path.join(LIB_DIR, 'config.coffee')];
        delete require.cache[path.join(LIB_DIR, 'config.js')];
        _ref = require.cache;
        for (key in _ref) {
          value = _ref[key];
          if (/\/node_modules\/nconf\//.test(key)) {
            delete require.cache[key];
          }
        }
        return done();
      });
      it('can load configuration file based on NODE_ENV', function(done) {
        var config;
        process.env.NODE_ENV = 'unit-testing';
        config = require(path.join(LIB_DIR, 'config')).config.init();
        config.get('mock-config').should.be.ok;
        config.get('mock-config:source').should.equal('config/unit-testing.json');
        return done();
      });
      it('supports properties of various types', function(done) {
        var config;
        process.env.NODE_ENV = 'unit-testing';
        config = require(path.join(LIB_DIR, 'config')).config.init();
        config.get('mock-config').should.be.ok;
        config.get('mock-config:bool-value').should.equal(true);
        config.get('mock-config:int-value').should.equal(17);
        config.get('mock-config:float-value').should.equal(3.14159);
        config.get('mock-config:string-value').should.equal('Lorem Ipsum');
        (config.get('mock-config:null-value') != null).should.not.be.ok;
        config.get('mock-config:array-value')[0].should.equal(true);
        config.get('mock-config:array-value')[1].should.equal(17);
        config.get('mock-config:array-value')[2].should.equal(3.14159);
        config.get('mock-config:array-value')[3].should.equal('Lorem Ipsum');
        config.get('mock-config:map-value')['int-value'].should.equal(19);
        config.get('mock-config:map-value:int-value').should.equal(19);
        return done();
      });
      it('supports default values passed to init', function(done) {
        var config, defaults;
        defaults = {
          "foo": "bar",
          "mock-config": {
            "int-value": -3,
            "other-int-value": -5
          }
        };
        process.env.NODE_ENV = 'unit-testing';
        config = require(path.join(LIB_DIR, 'config')).config.init(defaults);
        config.get('mock-config').should.be.ok;
        config.get('mock-config:int-value').should.equal(17);
        config.get('mock-config:other-int-value').should.equal(-5);
        config.get('foo').should.equal('bar');
        return done();
      });
      it('supports override values passed to init', function(done) {
        var config, overrides;
        overrides = {
          "foo": "bar",
          "mock-config": {
            "int-value": -3,
            "other-int-value": -5,
            "source": "override-passed-to-constructor"
          }
        };
        process.env.NODE_ENV = 'unit-testing';
        config = require(path.join(LIB_DIR, 'config')).config.init(null, overrides);
        config.get('mock-config').should.be.ok;
        config.get('mock-config:int-value').should.equal(-3);
        config.get('mock-config:other-int-value').should.equal(-5);
        config.get('foo').should.equal('bar');
        config.get('mock-config:source').should.equal('override-passed-to-constructor');
        return done();
      });
      it('supports config_dir set in environment variable', function(done) {
        var config;
        process.env.NODE_ENV = 'mock-config';
        process.env.config_dir = TEST_DIR;
        config = require(path.join(LIB_DIR, 'config')).config.init();
        config.get('mock-config').should.be.ok;
        config.get('mock-config:source').should.equal('test/mock-config.json');
        return done();
      });
      it('supports config_dir defined in an override', function(done) {
        var config, overrides;
        process.env.NODE_ENV = 'mock-config';
        overrides = {
          "config_dir": TEST_DIR
        };
        config = require(path.join(LIB_DIR, 'config')).config.init(null, overrides);
        config.get('mock-config').should.be.ok;
        config.get('mock-config:source').should.equal('test/mock-config.json');
        return done();
      });
      it('supports config_file set in environment variable', function(done) {
        var config;
        process.env.NODE_ENV = 'unit-testing';
        process.env.config_file = path.join(TEST_DIR, 'mock-config.json');
        config = require(path.join(LIB_DIR, 'config')).config.init();
        config.get('mock-config').should.be.ok;
        config.get('mock-config:source').should.equal('test/mock-config.json');
        return done();
      });
      return it('supports config_file defined in an override', function(done) {
        var config, overrides;
        process.env.NODE_ENV = 'unit-testing';
        overrides = {
          "config_file": path.join(TEST_DIR, 'mock-config.json')
        };
        config = require(path.join(LIB_DIR, 'config')).config.init(null, overrides);
        config.get('mock-config').should.be.ok;
        config.get('mock-config:source').should.equal('test/mock-config.json');
        return done();
      });
    };
  })(this));

}).call(this);
