// Generated by CoffeeScript 1.8.0
(function() {
  var HOMEDIR, LIB_COV, LIB_DIR, SQLRunner, SQLite3Client, SQLite3Runner, Util, fs, path,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    __slice = [].slice;

  fs = require('fs');

  path = require('path');

  HOMEDIR = path.join(__dirname, '..', '..');

  LIB_COV = path.join(HOMEDIR, 'lib-cov');

  LIB_DIR = fs.existsSync(LIB_COV) ? LIB_COV : path.join(HOMEDIR, 'lib');

  SQLRunner = require(path.join(LIB_DIR, 'sql-runner')).SQLRunner;

  SQLite3Client = require(path.join(LIB_DIR, 'sqlite3-client')).SQLite3Client;

  Util = require('inote-util').Util;

  SQLite3Runner = (function(_super) {
    __extends(SQLite3Runner, _super);

    function SQLite3Runner(opts, options) {
      this._stringify_results = __bind(this._stringify_results, this);
      this._handle_argv = __bind(this._handle_argv, this);
      this._get_options = __bind(this._get_options, this);
      this.set_client = __bind(this.set_client, this);
      var client;
      if ((opts != null) && typeof opts === 'object' && (options == null)) {
        options = opts;
        opts = null;
      }
      client = null;
      if (opts != null) {
        client = new SQLite3Client(opts);
      }
      SQLite3Runner.__super__.constructor.call(this, client, options);
    }

    SQLite3Runner.prototype.set_client = function(client) {
      if (client.execute == null) {
        client = new SQLite3Client(client);
      }
      return SQLite3Runner.__super__.set_client.call(this, client);
    };

    SQLite3Runner.prototype._get_options = function(additional) {
      var sqlite_opts;
      if (additional == null) {
        additional = {};
      }
      sqlite_opts = {
        d: {
          alias: 'db',
          describe: "Databse connect string."
        }
      };
      return SQLite3Runner.__super__._get_options.call(this, Util.merge(sqlite_opts, additional));
    };

    SQLite3Runner.prototype._handle_argv = function(argv) {
      if (argv.db != null) {
        this.set_client(argv.db);
      }
      return SQLite3Runner.__super__._handle_argv.call(this, argv);
    };

    SQLite3Runner.prototype._stringify_results = function() {
      var rows, tail;
      rows = arguments[0], tail = 2 <= arguments.length ? __slice.call(arguments, 1) : [];
      if (rows != null) {
        return JSON.stringify(rows, null, 2);
      } else {
        return SQLite3Runner.__super__._stringify_results.apply(this, [rows].concat(__slice.call(tail)));
      }
    };

    return SQLite3Runner;

  })(SQLRunner);

  exports.SQLite3Runner = SQLite3Runner;

  if (require.main === module) {
    (new SQLite3Runner()).main();
  }

}).call(this);
