// Generated by CoffeeScript 1.8.0
(function() {
  var HOMEDIR, LIB_COV, LIB_DIR, SQLClient, SQLClientPool, fs, path,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __slice = [].slice,
    __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  fs = require('fs');

  path = require('path');

  HOMEDIR = path.join(__dirname, '..');

  LIB_COV = path.join(HOMEDIR, 'lib-cov');

  LIB_DIR = fs.existsSync(LIB_COV) ? LIB_COV : path.join(HOMEDIR, 'lib');

  SQLClient = require(path.join(LIB_DIR, 'sql-client')).SQLClient;

  SQLClientPool = (function() {
    SQLClientPool.prototype.MESSAGES = {
      POOL_NOT_OPEN: "The pool is not open; please call 'open' before invoking this method.",
      TOO_MANY_RETURNED: "More clients have been returned to the pool than were active. A client may have been returned twice.",
      EXHAUSTED: "The maxiumum number of clients are already active; cannot obtain a new client.",
      MAX_WAIT: "The maxiumum number of clients are already active and the maximum wait time has been exceeded; cannot obtain a new client.",
      INVALID: "Unable to create a valid client.",
      INTERNAL_ERROR: "Internal error.",
      INVALID_ARGUMENT: "Invalid argument.",
      NULL_RETURNED: "A null object was returned.",
      CLOSED_WITH_ACTIVE: "The pool was closed, but some clients remain active (were never returned)."
    };

    SQLClientPool.prototype.DEFAULT_WAIT_INTERVAL = 50;

    SQLClientPool.prototype.create = function(callback) {
      var client;
      client = (function(func, args, ctor) {
        ctor.prototype = func.prototype;
        var child = new ctor, result = func.apply(child, args);
        return Object(result) === result ? result : child;
      })(SQLClient, __slice.call(this.sql_options).concat([this.factory]), function(){});
      return client.connect((function(_this) {
        return function(err) {
          return callback(err, client);
        };
      })(this));
    };

    SQLClientPool.prototype.activate = function(client, callback) {
      return callback(null, client);
    };

    SQLClientPool.prototype.validate = function(client, callback) {
      if ((client != null) && ((client.pooled_at == null) || (Date.now() - client.pooled_at) < this.pool_options.max_age)) {
        return callback(null, true, client);
      } else {
        return callback(null, false, client);
      }
    };

    SQLClientPool.prototype.passivate = function(client, callback) {
      return callback(null, client);
    };

    SQLClientPool.prototype.destroy = function(client, callback) {
      if (client != null) {
        return client.disconnect(callback);
      } else {
        return callback();
      }
    };

    SQLClientPool.prototype.pool = [];

    SQLClientPool.prototype.pool_options = {};

    SQLClientPool.prototype.open = false;

    SQLClientPool.prototype.borrowed = 0;

    SQLClientPool.prototype.returned = 0;

    SQLClientPool.prototype.active = 0;

    function SQLClientPool() {
      var factory, sql_options, _i;
      sql_options = 2 <= arguments.length ? __slice.call(arguments, 0, _i = arguments.length - 1) : (_i = 0, []), factory = arguments[_i++];
      this.sql_options = sql_options;
      this.factory = factory;
      this._activate_and_validate_or_destroy = __bind(this._activate_and_validate_or_destroy, this);
      this._return_n = __bind(this._return_n, this);
      this._borrow_n = __bind(this._borrow_n, this);
      this._prepopulate = __bind(this._prepopulate, this);
      this._evict = __bind(this._evict, this);
      this._reconfig = __bind(this._reconfig, this);
      this._config = __bind(this._config, this);
      this["return"] = __bind(this["return"], this);
      this.borrow = __bind(this.borrow, this);
      this.close = __bind(this.close, this);
      this.open = __bind(this.open, this);
      this.destroy = __bind(this.destroy, this);
      this.passivate = __bind(this.passivate, this);
      this.validate = __bind(this.validate, this);
      this.activate = __bind(this.activate, this);
      this.create = __bind(this.create, this);
    }

    SQLClientPool.prototype.open = function(opts, callback) {
      if ((callback == null) && typeof opts === 'function') {
        callback = opts;
        opts = null;
      }
      if (typeof callback !== 'function') {
        throw new Error(this.MESSAGES.INVALID_ARGUMENT);
      } else {
        return this._config(opts, (function(_this) {
          return function(err) {
            _this.open = true;
            return typeof callback === "function" ? callback(err) : void 0;
          };
        })(this));
      }
    };

    SQLClientPool.prototype.close = function(callback) {
      if ((callback != null) && typeof callback !== 'function') {
        throw new Error(this.MESSAGES.INVALID_ARGUMENT);
      } else {
        this.open = false;
        if (this.pool.length > 0) {
          return this.destroy(this.pool.shift(), (function(_this) {
            return function() {
              return _this.close(callback);
            };
          })(this));
        } else {
          if (this.active > 0) {
            return typeof callback === "function" ? callback(new Error(this.MESSAGES.CLOSED_WITH_ACTIVE)) : void 0;
          } else {
            return typeof callback === "function" ? callback() : void 0;
          }
        }
      }
    };

    SQLClientPool.prototype.borrow = function(callback, blocked_since) {
      var client;
      if (typeof callback !== 'function') {
        throw new Error(this.MESSAGES.INVALID_ARGUMENT);
      } else {
        if (!this.open) {
          return callback(new Error(this.MESSAGES.NOT_OPEN));
        } else {
          if (this.active >= this.pool_options.max_active && this.pool_options.when_exhausted === 'fail') {
            return callback(new Error(this.MESSAGES.EXHAUSTED));
          } else if (this.active >= this.pool_options.max_active && this.pool_options.when_exhausted === 'block') {
            if ((blocked_since != null) && (Date.now() - blocked_since) >= this.pool_options.max_wait) {
              return callback(new Error(this.MESSAGES.MAX_WAIT));
            } else {
              if (blocked_since == null) {
                blocked_since = Date.now();
              }
              return setTimeout(((function(_this) {
                return function() {
                  return _this.borrow(callback, blocked_since);
                };
              })(this)), this.pool_options.wait_interval);
            }
          } else if (this.pool.length > 0) {
            client = this.pool.shift();
            return this._activate_and_validate_or_destroy(client, (function(_this) {
              return function(err, valid, client) {
                if (err != null) {
                  return callback(err);
                } else if (!valid) {
                  return _this.borrow(callback);
                } else {
                  client.pooled_at = null;
                  client.borrowed_at = Date.now();
                  _this.active++;
                  return callback(null, client);
                }
              };
            })(this));
          } else {
            return this.create((function(_this) {
              return function(err, client) {
                if (err != null) {
                  return callback(err);
                } else {
                  return _this._activate_and_validate_or_destroy(client, function(err, valid, client) {
                    if (err != null) {
                      return callback(err);
                    } else if (!valid) {
                      return callback(new Error(_this.MESSAGES.INVALID));
                    } else {
                      client.pooled_at = null;
                      client.borrowed_at = Date.now();
                      _this.active++;
                      return callback(null, client);
                    }
                  });
                }
              };
            })(this));
          }
        }
      }
    };

    SQLClientPool.prototype["return"] = function(client, callback) {
      if (((client == null) && (callback == null)) || ((callback != null) && typeof callback !== 'function')) {
        throw new Error(this.MESSAGES.INVALID_ARGUMENT);
      } else if (client == null) {
        return callback(new Error(this.MESSAGES.NULL_RETURNED));
      } else if (this.active <= 0) {
        return callback(new Error(this.MESSAGES.TOO_MANY_RETURNED));
      } else {
        this.returned++;
        this.active--;
        if (client != null) {
          return this.passivate(client, (function(_this) {
            return function(err, client) {
              if (err) {
                return callback(err);
              } else {
                client.pooled_at = Date.now();
                client.borrowed_at = null;
                if (_this.pool.length >= _this.pool_options.max_idle) {
                  return _this.destroy(client, callback);
                } else {
                  _this.pool.push(client);
                  return typeof callback === "function" ? callback() : void 0;
                }
              }
            };
          })(this));
        }
      }
    };

    SQLClientPool.prototype._config = function(opts, callback) {
      var keys, new_opts, prop, _i, _len, _ref, _ref1;
      if (opts == null) {
        opts = {};
      }
      new_opts = this._clone(this.pool_options);
      keys = Object.keys(opts);
      _ref = ['min_idle', 'max_idle', 'max_active', 'when_exhausted', 'max_wait', 'wait_interval', 'max_age'];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        prop = _ref[_i];
        if (__indexOf.call(keys, prop) >= 0) {
          new_opts[prop] = opts[prop];
        }
      }
      if (typeof new_opts.max_idle === 'number' && new_opts.max_idle < 0) {
        new_opts.max_idle = Number.MAX_VALUE;
      } else if (typeof new_opts.max_idle !== 'number') {
        new_opts.max_idle = 0;
      }
      if (typeof new_opts.min_idle !== 'number' || new_opts.min_idle < 0) {
        new_opts.min_idle = 0;
      }
      if (new_opts.min_idle > new_opts.max_idle) {
        new_opts.min_idle = new_opts.max_idle;
      }
      if (typeof new_opts.max_active !== 'number' || new_opts.max_active < 0) {
        new_opts.max_active = Number.MAX_VALUE;
      }
      if (typeof new_opts.max_wait !== 'number' || new_opts.max_wait < 0) {
        new_opts.max_wait = Number.MAX_VALUE;
      }
      if (typeof new_opts.wait_interval !== 'number' || new_opts.wait_interval < 0) {
        new_opts.wait_interval = this.DEFAULT_WAIT_INTERVAL;
      }
      if ((_ref1 = new_opts.when_exhausted) !== 'grow' && _ref1 !== 'block' && _ref1 !== 'fail') {
        new_opts.when_exhausted = 'grow';
      }
      if (!(typeof new_opts.block_timeout === 'number' && new_opts.block_timeout > 0)) {
        new_opts.block_timeout = null;
      }
      if ((new_opts.max_age == null) || new_opts.max_age < 0) {
        new_opts.max_age = Number.MAX_VALUE;
      }
      this.pool_options = new_opts;
      return this._reconfig(callback);
    };

    SQLClientPool.prototype._reconfig = function(callback) {
      return this._evict((function(_this) {
        return function(err) {
          if (err != null) {
            return typeof callback === "function" ? callback(err) : void 0;
          } else {
            return _this._prepopulate(callback);
          }
        };
      })(this));
    };

    SQLClientPool.prototype._evict = function(callback) {
      var client, new_pool;
      new_pool = [];
      while (this.pool.length > 0) {
        client = this.pool.shift();
        if (new_pool.length < this.pool_options.max_idle && this._is_valid(client)) {
          new_pool.push(client);
        } else {
          client.disconnect();
        }
      }
      this.pool = new_pool;
      return typeof callback === "function" ? callback() : void 0;
    };

    SQLClientPool.prototype._prepopulate = function(callback) {
      var n;
      n = this.pool_options.min_idle - this.pool.length;
      if (n > 0) {
        return this._borrow_n(n, [], (function(_this) {
          return function(err, borrowed) {
            if (err != null) {
              return callback(err);
            } else {
              return _this._return_n(borrowed, callback);
            }
          };
        })(this));
      } else {
        return callback();
      }
    };

    SQLClientPool.prototype._borrow_n = function(n, borrowed, callback) {
      if (typeof n !== 'number' || !Array.isArray(borrowed)) {
        return callback(new Error(this.MESSAGES.INTERNAL_ERROR));
      } else {
        if (n > borrowed.length) {
          return this.borrow((function(_this) {
            return function(err, client) {
              if (client != null) {
                borrowed.push(client);
              }
              if (err != null) {
                return _this._return_n(borrowed, function() {
                  return callback(err);
                });
              } else {
                return _this._borrow_n(n, borrowed, callback);
              }
            };
          })(this));
        } else {
          return callback(null, borrowed);
        }
      }
    };

    SQLClientPool.prototype._return_n = function(borrowed, callback) {
      var client;
      if (!Array.isArray(borrowed)) {
        return callback(new Error(this.MESSAGES.INTERNAL_ERROR));
      } else if (borrowed.length > 0) {
        client = borrowed.shift();
        return this["return"](client, (function(_this) {
          return function() {
            return _this._return_n(borrowed, callback);
          };
        })(this));
      } else {
        return callback(null);
      }
    };

    SQLClientPool.prototype._activate_and_validate_or_destroy = function(client, callback) {
      return this.activate(client, (function(_this) {
        return function(err, client) {
          if (err != null) {
            if (client != null) {
              return _this.destroy(client, function() {
                return callback(err, false, null);
              });
            } else {
              return callback(err, false, null);
            }
          } else {
            return _this.validate(client, function(err, valid, client) {
              if (err != null) {
                if (client != null) {
                  return _this.destroy(client, function() {
                    return callback(err, false, null);
                  });
                } else {
                  return callback(err, false, null);
                }
              } else if (!valid) {
                return _this.destroy(client, function() {
                  return callback(null, false, null);
                });
              } else {
                return callback(null, true, client);
              }
            });
          }
        };
      })(this));
    };

    SQLClientPool.prototype._clone = function(map) {
      var cloned, n, v;
      if (map == null) {
        return null;
      } else {
        cloned = {};
        for (n in map) {
          v = map[n];
          cloned[n] = v;
        }
        return cloned;
      }
    };

    return SQLClientPool;

  })();

  exports.SQLClientPool = SQLClientPool;

}).call(this);
