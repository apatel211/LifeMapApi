// Generated by CoffeeScript 1.8.0
(function() {
  var ConnectionFactory, HOMEDIR, LIB_COV, LIB_DIR, SQLClient, SQLClientPool, SQLite3Client, SQLite3ClientPool, SQLite3ConnectionFactory, fs, path, sqlite3,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    __slice = [].slice;

  fs = require('fs');

  path = require('path');

  HOMEDIR = path.join(__dirname, '..');

  LIB_COV = path.join(HOMEDIR, 'lib-cov');

  LIB_DIR = fs.existsSync(LIB_COV) ? LIB_COV : path.join(HOMEDIR, 'lib');

  SQLClient = require(path.join(LIB_DIR, 'sql-client')).SQLClient;

  SQLClientPool = require(path.join(LIB_DIR, 'sql-client-pool')).SQLClientPool;

  ConnectionFactory = require(path.join(LIB_DIR, 'connection-factory')).ConnectionFactory;

  sqlite3 = require('sqlite3').verbose();

  SQLite3ConnectionFactory = (function(_super) {
    __extends(SQLite3ConnectionFactory, _super);

    function SQLite3ConnectionFactory() {
      this.execute = __bind(this.execute, this);
      this.open_connection = __bind(this.open_connection, this);
      return SQLite3ConnectionFactory.__super__.constructor.apply(this, arguments);
    }

    SQLite3ConnectionFactory.prototype.open_connection = function(filename, mode, callback) {
      var cb, db;
      if (typeof mode === 'function' && (callback == null)) {
        callback = mode;
        mode = null;
      }
      db = null;
      cb = (function(_this) {
        return function(err) {
          if (err != null) {
            return callback(err);
          } else {
            return callback(null, db);
          }
        };
      })(this);
      if (mode != null) {
        return db = new sqlite3.Database(filename, mode, cb);
      } else {
        return db = new sqlite3.Database(filename, cb);
      }
    };

    SQLite3ConnectionFactory.prototype.execute = function(db, sql, bindvars, callback) {
      if (bindvars == null) {
        bindvars = [];
      }
      return db.all(sql, bindvars, callback);
    };

    return SQLite3ConnectionFactory;

  })(ConnectionFactory);

  SQLite3Client = (function(_super) {
    __extends(SQLite3Client, _super);

    function SQLite3Client() {
      var options;
      options = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
      SQLite3Client.__super__.constructor.apply(this, __slice.call(options).concat([new SQLite3ConnectionFactory()]));
    }

    return SQLite3Client;

  })(SQLClient);

  SQLite3ClientPool = (function(_super) {
    __extends(SQLite3ClientPool, _super);

    function SQLite3ClientPool() {
      var options;
      options = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
      SQLite3ClientPool.__super__.constructor.apply(this, __slice.call(options).concat([new SQLite3ConnectionFactory()]));
    }

    return SQLite3ClientPool;

  })(SQLClientPool);

  exports.SQLite3ConnectionFactory = SQLite3ConnectionFactory;

  exports.SQLite3Client = SQLite3Client;

  exports.SQLite3ClientPool = SQLite3ClientPool;

}).call(this);
