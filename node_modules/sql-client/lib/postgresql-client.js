// Generated by CoffeeScript 1.8.0
(function() {
  var ConnectionFactory, HOMEDIR, LIB_COV, LIB_DIR, PostgreSQLClient, PostgreSQLClientPool, PostgreSQLConnectionFactory, SQLClient, SQLClientPool, fs, path, pg,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    __slice = [].slice;

  fs = require('fs');

  path = require('path');

  HOMEDIR = path.join(__dirname, '..');

  LIB_COV = path.join(HOMEDIR, 'lib-cov');

  LIB_DIR = fs.existsSync(LIB_COV) ? LIB_COV : path.join(HOMEDIR, 'lib');

  SQLClient = require(path.join(LIB_DIR, 'sql-client')).SQLClient;

  SQLClientPool = require(path.join(LIB_DIR, 'sql-client-pool')).SQLClientPool;

  ConnectionFactory = require(path.join(LIB_DIR, 'connection-factory')).ConnectionFactory;

  pg = require('pg')["native"];

  PostgreSQLConnectionFactory = (function(_super) {
    __extends(PostgreSQLConnectionFactory, _super);

    function PostgreSQLConnectionFactory() {
      this.pre_process_sql = __bind(this.pre_process_sql, this);
      this.open_connection = __bind(this.open_connection, this);
      return PostgreSQLConnectionFactory.__super__.constructor.apply(this, arguments);
    }

    PostgreSQLConnectionFactory.prototype.open_connection = function(connect_string, callback) {
      var connection;
      connection = new pg.Client(connect_string);
      return connection.connect((function(_this) {
        return function(err) {
          return callback(err, connection);
        };
      })(this));
    };

    PostgreSQLConnectionFactory.prototype.pre_process_sql = function(sql, bindvars, callback) {
      var index;
      if ((sql != null) && (bindvars != null)) {
        index = 1;
        sql = sql.replace(/\?/g, (function() {
          return '$' + index++;
        }));
      }
      return callback(null, sql, bindvars);
    };

    return PostgreSQLConnectionFactory;

  })(ConnectionFactory);

  PostgreSQLClient = (function(_super) {
    __extends(PostgreSQLClient, _super);

    function PostgreSQLClient() {
      var options;
      options = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
      PostgreSQLClient.__super__.constructor.apply(this, __slice.call(options).concat([new PostgreSQLConnectionFactory()]));
    }

    return PostgreSQLClient;

  })(SQLClient);

  PostgreSQLClientPool = (function(_super) {
    __extends(PostgreSQLClientPool, _super);

    function PostgreSQLClientPool() {
      var options;
      options = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
      PostgreSQLClientPool.__super__.constructor.apply(this, __slice.call(options).concat([new PostgreSQLConnectionFactory()]));
    }

    return PostgreSQLClientPool;

  })(SQLClientPool);

  exports.PostgreSQLConnectionFactory = PostgreSQLConnectionFactory;

  exports.PostgreSQLClient = PostgreSQLClient;

  exports.PostgreSQLClientPool = PostgreSQLClientPool;

}).call(this);
