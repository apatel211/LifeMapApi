// Generated by CoffeeScript 1.8.0
(function() {
  var SQLClient,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __slice = [].slice;

  SQLClient = (function() {
    function SQLClient() {
      var factory, options, _i;
      options = 2 <= arguments.length ? __slice.call(arguments, 0, _i = arguments.length - 1) : (_i = 0, []), factory = arguments[_i++];
      this.options = options;
      this.factory = factory;
      this.execute = __bind(this.execute, this);
      this.disconnect = __bind(this.disconnect, this);
      this.connect = __bind(this.connect, this);
      this.created_at = Date.now();
      this.pooled_at = null;
      this.borrowed_at = null;
      this.connected_at = null;
    }

    SQLClient.prototype.connect = function(callback) {
      var _ref;
      if (this.connection == null) {
        return (_ref = this.factory).open_connection.apply(_ref, __slice.call(this.options).concat([(function(_this) {
          return function(err, connection) {
            if (err != null) {
              return typeof callback === "function" ? callback(err) : void 0;
            } else {
              _this.connection = connection;
              _this.connected_at = Date.now();
              return typeof callback === "function" ? callback() : void 0;
            }
          };
        })(this)]));
      } else {
        return typeof callback === "function" ? callback() : void 0;
      }
    };

    SQLClient.prototype.disconnect = function(callback) {
      if (this.connection != null) {
        return this.factory.close_connection(this.connection, (function(_this) {
          return function(err) {
            if (err != null) {
              return typeof callback === "function" ? callback(err, _this.connection) : void 0;
            } else {
              _this.connection = null;
              _this.connected_at = null;
              return typeof callback === "function" ? callback() : void 0;
            }
          };
        })(this));
      } else {
        return typeof callback === "function" ? callback() : void 0;
      }
    };

    SQLClient.prototype.execute = function(sql, bindvars, callback) {
      if ((callback == null) && typeof bindvars === 'function') {
        callback = bindvars;
        bindvars = null;
      }
      if (this.connection == null) {
        return this.connect((function(_this) {
          return function(err) {
            if (err != null) {
              return callback(err);
            } else {
              return _this.execute(sql, bindvars, callback);
            }
          };
        })(this));
      } else {
        return this.factory.pre_process_sql(sql, bindvars, (function(_this) {
          return function(err, sql, bindvars) {
            if (err != null) {
              return typeof callback === "function" ? callback(err) : void 0;
            } else {
              return _this.factory.execute(_this.connection, sql, bindvars, callback);
            }
          };
        })(this));
      }
    };

    return SQLClient;

  })();

  exports.SQLClient = SQLClient;

}).call(this);
