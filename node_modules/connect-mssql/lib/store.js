// Generated by CoffeeScript 1.8.0
(function() {
  'use strict';
  var sql,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  sql = require('mssql');

  module.exports = function(session) {
    var MSSQLStore, Store, _ref;
    Store = (_ref = session.Store) != null ? _ref : session.session.Store;
    MSSQLStore = (function(_super) {
      __extends(MSSQLStore, _super);

      MSSQLStore.prototype.table = 'sessions';


      /*
      		Initialize MSSQLStore with the given `options`.
      		
      		@param {Object} options
       */

      function MSSQLStore(options) {
        this.connection = new sql.Connection(options);
        this.connection.connect();
      }


      /*
      		Attempt to fetch session by the given `sid`.
      		
      		@param {String} sid
      		@callback callback
       */

      MSSQLStore.prototype.get = function(sid, callback) {
        var request;
        request = this.connection.request();
        request.input('sid', sid);
        return request.query("select session from [" + this.table + "] where sid = @sid", function(err, recordset) {
          if (err) {
            return callback(err);
          }
          if (recordset.length) {
            return callback(null, JSON.parse(recordset[0].session));
          }
          return callback(null, null);
        });
      };


      /*
      		Commit the given `sess` object associated with the given `sid`.
      		
      		@param {String} sid
      		@param {Object} data
      		@callback callback
       */

      MSSQLStore.prototype.set = function(sid, data, callback) {
        var expires, request, _ref1, _ref2;
        expires = new Date((_ref1 = (_ref2 = data.cookie) != null ? _ref2.expires : void 0) != null ? _ref1 : Date.now() + 86400);
        request = this.connection.request();
        request.input('sid', sid);
        request.input('session', JSON.stringify(data));
        request.input('expires', expires);
        return request.query("merge into [" + this.table + "] with (holdlock) s using (values(@sid, @session)) as ns (sid, session) on (s.sid = ns.sid) when matched then update set s.session = @session, s.expires = @expires when not matched then insert (sid, session, expires) values (@sid, @session, @expires);", callback);
      };


      /*
      		Destroy the session associated with the given `sid`.
      		
      		@param {String} sid
      		@callback callback
       */

      MSSQLStore.prototype.destroy = function(sid, callback) {
        var request;
        request = this.connection.request();
        request.input('sid', sid);
        return request.query("delete from [" + this.table + "] where sid = @sid", callback);
      };


      /*
      		Fetch number of sessions.
      		
      		@callback callback
       */

      MSSQLStore.prototype.length = function(callback) {
        var request;
        request = this.connection.request();
        return request.query("select count(sid) as length from [" + this.table + "]", function(err, recordset) {
          if (err) {
            return callback(err);
          }
          return callback(null, recordset[0].length);
        });
      };


      /*
      		Clear all sessions.
      		
      		@callback callback
       */

      MSSQLStore.prototype.clear = function(callback) {
        var request;
        request = this.connection.request();
        return request.query("truncate table [" + this.table + "]", callback);
      };

      return MSSQLStore;

    })(Store);
    return MSSQLStore;
  };

}).call(this);
